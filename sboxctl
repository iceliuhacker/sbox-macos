#!/bin/bash


_skip_net='192.168.0.0/16,172.16.0.0/12,10.0.0.0/8,224.0.0.0/3,100.64.0.0/10,127.0.0.0/8,169.254.0.0/16,240.0.0.0/4,0.0.0.0/8,192.0.0.0/24,192.0.2.0/24,192.88.99.0/24,198.18.0.0/15,198.51.100.0/24,203.0.113.0/24'
_skip_net6='::1/128,fc00::/7,fe80::/10'
CHK_LIST='www.google.com twitter.com www.facebook.com www.baidu.com www.sohu.com'
_tun_ip=100.100.100.100
_tun_ip6='fd00::100:100:100:100'
ACT=$1
TYPE=$2



chk_sudo()
{
	id -u | grep -q '^0$' && (echo "Don't run for root!!!"; exit 0) && exit 1
	sudo -p "Please input sudo password:" -l > /dev/null
	sudo sysctl net.inet.ip.forwarding=1 > /dev/null
	sudo sysctl net.inet6.ip6.forwarding=1 > /dev/null
}

create_conf()
{
	ls tpl/*.input.tpl 2>/dev/null | sed -e 's/^tpl\///' -e 's/.input.tpl$//' | cat -n 
	echo "Please select the type of connection you want to create:" | awk '{printf $0}'
	read IN_TPL
	IN_TPL=`echo $IN_TPL | awk '{printf int($1)}'`
	if [ -z $IN_TPL ] || [ "$IN_TPL" = "0" ]; then
		exit
	fi
	TPL=`ls tpl/*.input.tpl 2>/dev/null | sed -n ${IN_TPL}p`
	if [ -z $TPL ]; then
		echo "Choice error!!!"
		exit 1
	fi
	
	echo "Please enter a node name:" | awk '{printf $0}'
	read CONF_FILE
	if [ -f db/$CONF_FILE.sbox ]; then
		echo "Already exists, do you want to overwrite it?" | awk '{printf $0}'
		read CON
		echo $CON | egrep -q -i 'y|yes' || exit 1
	fi
	touch db/$CONF_FILE.sbox || (echo "Error name!!!"; exit 1) || exit 1
	rm -f db/$CONF_FILE.sbox
	LINE=0
	while true; do
		LINE=`expr $LINE + 1`
		STR=`sed -n ${LINE}p $TPL`
		if [ -z "$STR" ]; then
			break
		fi
		
		VAR_NAME=`echo $STR | awk -F'=' '{printf $1}'`
		VAR_VALUE=`echo $STR | awk -F'=' '{printf $2}'`

		if [ "$VAR_NAME" = "protocol" ] || [  "$VAR_NAME" = "flow" ]; then
			echo "${VAR_NAME}=${VAR_VALUE}" >> db/$CONF_FILE.sbox
			continue
		fi
		if [ "$VAR_NAME" = "serverName" ] && [ "$VAR_VALUE" = "sni" ]; then
			echo "serverName=$sni" >> db/$CONF_FILE.sbox
			continue
		fi
		#获取提问里[]的内容，并设置为可选项以及默认赋值。
		SELECT=`echo $VAR_VALUE | awk -F'[\\\[\\\]]' '{printf $2}'`
		if [ ! -z $SELECT ]; then
			echo "$VAR_VALUE" | awk '{printf $0}'
			read TMP_VAR
			echo $SELECT | tr -s ',' '\n' | grep -q "^${TMP_VAR}$" || TMP_VAR=`echo $SELECT | awk -F',' '{printf $1}'`
			echo "${VAR_NAME}=${TMP_VAR}" >> db/$CONF_FILE.sbox
			continue
		fi

		echo $VAR_VALUE | awk '{printf $0}'
		read TMP_VAR
		echo "${VAR_NAME}=${TMP_VAR}" >> db/$CONF_FILE.sbox
		export ${VAR_NAME}=${TMP_VAR}
	done
	echo "#### Creating Connection Nodes $CONF_FILE ####"
	cat db/$CONF_FILE.sbox
}

config()
{
	mkdir -p db
	echo '     0  new'
	ls db/*.sbox 2>/dev/null | sed -e 's/^db\///' -e 's/.sbox$//' | cat -n
cat << EOF
Please select configuration file,Multiple separated by spaces,99 is all,DEL for delete node.
Example_1:1      -> select 1.
Example_2:1,3,5  -> select 1,3,5.
Example_3:99     -> select all.
EOF
	echo "Please input:[0]" | awk '{printf $0}'
	read TPL_NUMBER
	if [ "$TPL_NUMBER" = "" ]; then
		TPL_NUMBER=0
	fi
	if [ "$TPL_NUMBER" = "0" ]; then
		create_conf
		exit 0
	fi
	if [ "$TPL_NUMBER" = "99" ]; then
		ls db/*.sbox 2>/dev/null | sed -e 's/^db\///' -e 's/.sbox$//' | sed -n 1,99p > conf/run.conf
	else
		TPL_NUMBER=`echo $TPL_NUMBER | tr -s ' ,' '\n' | awk '{printf $1"p;"}'`
		ls db/*.sbox 2>/dev/null | sed -e 's/^db\///' -e 's/.sbox$//' | sed -n "${TPL_NUMBER}" > conf/run.conf
	fi
	DEST_LIST=`cat conf/run.conf`
	if [ "$DEST_LIST" = "" ]; then
		create_conf
	fi
	PID=`ps axwww | grep 'sing-box run -C run' | grep -v grep | awk '{printf $1}'`
	if [ "$PID" != "" ]; then
		#chk_sudo
		#sudo pfctl -sr 2>/dev/null | grep -q '^pass out quick route-to ' && TYPE=tun || TYPE=proxy
		restart
	else
		create_json
	fi
}

create_json()
{
	./sing-box version
	mkdir -p run
	#创建主配置
	rm -f run/*.json
	RUN_COUNT=`cat conf/run.conf | wc -l | awk '{printf $1}'`
	DEST_RULE_LIST=''
	RUN_CONF=`cat conf/run.conf`
	for XCONF in $RUN_CONF; do
		source db/$XCONF.sbox || RUN_COUNT=`expr $RUN_COUNT - 1`
		if [ "$RUN_COUNT" -lt "1" ]; then
			echo "Not alive node!!!"
			exit
		fi
		if [ -z $network ]; then
			network=tcp
		fi
		JCON=0
		if [ "$JCON" != "1" ] && [ "$protocol" = "vless" ] && [ "$flow" = "xtls-rprx-vision" ] && [ "$network" = "tcp" ] && [ "$security" = "reality" ]; then
			TPL=tpl/$protocol.$flow.$security.json.tpl
			JCON=1
		fi
		if [ "$JCON" != "1" ] && [ "$protocol" = "vless" ] && [ "$flow" = "xtls-rprx-vision" ] && [ "$network" = "tcp" ] && [ "$security" = "tls" ]; then
			TPL=tpl/$protocol.$flow.$security.json.tpl
			JCON=1
		fi

		if [ "$JCON" = "0" ]; then
			echo "Error sing-box date \"$XCONF\"!!"
			continue
		fi
		DEST_RULE_LIST=$DEST_RULE_LIST`cat db/$XCONF.sbox | grep 'address=' | awk -F'=' '{print "pass out quick inet proto tcp from any to "$2","}'`
		
		if [ "$RUN_COUNT" -gt "1" ]; then
			TAG="-${XCONF}"
		else
			TAG=''
		fi
		cat $TPL | sed -e "s/_TAG_/${TAG}/g" \
						-e "s/_protocol_/${protocol}/g" \
						-e "s/_address_/${address}/g" \
						-e "s/_port_/${port}/g" \
						-e "s/_flow_/${flow}/g" \
						-e "s/_id_/${id}/g" \
						-e "s/_security_/${security}/g" \
						-e "s/_sni_/${sni}/g" \
						-e "s/_serverName_/${serverName}/g" \
						-e "s/_fingerprint_/${fp}/g" \
						-e "s/_allowInsecure_/${allowInsecure}/g" \
						-e "s/_publicKey_/${publicKey}/g" \
						-e "s/_shortId_/${shortId}/g" \
						> run/600_$XCONF.json
	done

	if [ "$RUN_COUNT" -gt "1" ]; then
		TAG_LIST=`cat conf/run.conf | awk '{printf "UP_LINK-"$1"\",\""}' | sed 's/","$//'`
		cat tpl/selector.json.tpl | sed -e "s/_TAG_LIST_/${TAG_LIST}/g" > run/610_selector.json
	fi
	
	cat tpl/main.json.tpl > run/000_main.json
	if [ "$TYPE" = "tun" ] || [ "$TYPE" = "fwd" ]; then
		if [ "$TYPE" = "fwd" ]; then
			GDNS='"8.8.8.8/32"'
			GDNS6='"2001:4860:4860::8888/128"'
		else
			GDNS=''
			GDNS6=''
		fi
		cat tpl/tun.json.tpl | sed -e "s/_tun_ip_/${_tun_ip}/g" \
									-e "s/_tun_ip6_/${_tun_ip6}/g" \
									-e "s@_GDNS_@${GDNS}@g" \
									-e "s@_GDNS6_@${GDNS6}@g" \
									> run/100_tun.json
	fi

	#创建DNS规则
	cat << EOF >> run/200_dns.json
{
    "dns": {
        "servers": [
EOF
	grep 'nameserver=' conf/dns.conf \
	| awk -F'#' '{if ($1!="") print $1}' \
	| awk -F'=' '{
		LEN=split($2,DNS,",");
		S_strategy="";
		for(i=1;i<=LEN;i++) {
			if ($3=="UP_LINK") {
				DNS[i]="tcp://"DNS[i];
				S_strategy="ipv4_only";
			};
			print "            {";
			print "                \"tag\": \""DNS[i]"\",";
			print "                \"address\": \""DNS[i]"\",";
			print "                \"strategy\": \""S_strategy"\",";
			print "                \"detour\": \""$3"\"";
			print "            },";
		}
	}' | sed '$s/},/}/' >> run/200_dns.json

	cat << EOF >> run/200_dns.json
        ],
        "rules": [
EOF
	egrep 'domain_suffix=|geosite=' conf/dns.conf \
	| awk -F'#' '{if ($1!="") print $1}' \
	| awk -F'=' '{
		DLIST=$2;
		sub(/,/,"\",\"",DLIST);
		LEN=split($3,DNS,",");
		for(i=1;i<=LEN;i++) {
			print "            {";
			print "                \""$1"\": [\""DLIST"\"],";
			print "                \"server\": \""DNS[i]"\"";
			print "            },";
		};

	}' | sed '$s/},/}/' >> run/200_dns.json
	cat << EOF >> run/200_dns.json
        ]
    }
}
EOF

	#创建路由规则
	cat << EOF >> run/300_route.json
{
    "route": {
        "auto_detect_interface": true,
        "rules": [
            {
                "port": 53,
                "outbound": "dns-out"
            },
            {
                "protocol": "dns",
                "outbound": "dns-out"
            },
EOF
	RT_INFO=`cat conf/route.conf | awk -F'#' '{print $1}'`
	for RT in $RT_INFO;do
		HOST_TYPE=`echo $RT | awk -F'=' '{printf $1}'`
		if [ "$HOST_TYPE" = "ip" ]; then
			HOST_TYPE=ip_cidr
		fi
		HOST_LIST=`echo $RT | awk -F'=' '{printf $2}' | sed 's/,/","/g'`
		HOST_ACT=`echo $RT | awk -F'=' '{printf $3}'`
		
		cat << EOF >> run/300_route.json
            {
                "$HOST_TYPE": ["$HOST_LIST"],
                "outbound": "$HOST_ACT"
            },
EOF
	done
	sed -i '' '$s/},/}/' run/300_route.json
	cat << EOF >> run/300_route.json
        ]
    }
}
EOF
	cat << EOF >> run/900_outbounds.json
{
    "outbounds": [
        {
            "tag": "dns-out",
            "type": "dns"
        },
        {
            "tag": "direct",
            "type": "direct"
        },
        {
            "tag": "block",
            "type": "block"
        }
    ]
}
EOF
}

enable_pf()
{
	check_startd_ok
	ME=`whoami`
	if [ -f conf/my_ipv4.txt ]; then
		_skip_net="$_skip_net"`cat conf/my_ipv4.txt`
	fi
	if [ -f conf/my_ipv6.txt ]; then
		_skip_net6="$_skip_net6"`cat conf/my_ipv6.txt`
	fi
	if [ -f conf/cn_ipv4.txt ]; then
		_skip_net="$_skip_net"`cat conf/cn_ipv4.txt`
	fi
	if [ -f conf/cn_ipv6.txt ]; then
		_skip_net6="$_skip_net6"`cat conf/cn_ipv6.txt`
	fi
	TUN_IF=`netstat -f inet -rn | awk '{if ($1=="'$_tun_ip'") printf $4}'`
	cat << EOF > conf/pf.rules
table <skip_net> { $_skip_net }
table <skip_net6> { $_skip_net6 }

`echo "${DEST_RULE_LIST}" | tr ',' '\n' | awk -F':' '{if (NF>1) {sub(/ inet /," inet6 ");print $0;} else print $1}'`

pass out quick route-to ($TUN_IF $_tun_ip) inet proto {tcp,udp} from any to any port 53 user {$ME,_mdnsresponder}
pass out quick route-to ($TUN_IF $_tun_ip) inet from any to ! <skip_net> user = $ME

pass out quick route-to ($TUN_IF $_tun_ip6) inet6 proto {tcp,udp} from any to any port 53 user {$ME,_mdnsresponder}
pass out quick route-to ($TUN_IF $_tun_ip6) inet6 from any to ! <skip_net6> user = $ME

#pass out quick all
EOF
	sudo pfctl -e > /dev/null 2>&1
	sudo pfctl -f conf/pf.rules > /dev/null 2>&1 || (echo "PF firewall load Fail!!!"; sudo pfctl -f conf/pf.rules; exit 1) || exit 1
	sudo killall -HUP mDNSResponder 2>&1
	#enable_proxy
}

disable_pf()
{
	sudo pfctl -dF all > /dev/null 2>&1
	sudo killall -HUP mDNSResponder 2>&1
	#disable_proxy
}

enable_proxy()
{
	networksetup -listnetworkserviceorder | grep '^([0-99]) ' | sed 's/^([0-99]) //' | \
		while read ETH; do
			networksetup -setsocksfirewallproxy "$ETH" localhost 65080
			networksetup -setsocksfirewallproxystate "$ETH" on
			#networksetup -setproxybypassdomains "$ETH" youtube.com whatismyipaddress.com    #跳过代理得域名
			#networksetup -setv6off "$ETH"
		done
}

disable_proxy()
{
	networksetup -listnetworkserviceorder | grep '^([0-99]) ' | sed 's/^([0-99]) //' | \
		while read ETH; do
			networksetup -setsocksfirewallproxy "$ETH" "" ""
			networksetup -setsocksfirewallproxystate "$ETH" off
			#networksetup -setv6automatic "$ETH"
		done
}

check_run()
{
	PID=`ps axwww | grep 'sing-box run -C run' | grep -v grep | awk '{printf $1}'`
	if [ "$PID" != "" ]; then
		echo "Already running..."
		exit 0
	fi
}

check_startd_ok()
{
	STARTED=0
	for x in `seq 20`; do
		sleep 0.2
		ifconfig | grep -q $_tun_ip && STARTED=1 && break
	done
	if [ "$STARTED" != "1" ]; then
		stop
		#disable_tun
		#disable_proxy
		disable_pf
		echo "Start Fail!!!"
		cat log/sing-box.log
		exit 1
	fi
}

start()
{
	if [ ! -f run/000_main.json ] || [ ! -f run/200_dns.json ] || [ ! -f run/300_route.json ] || [ ! -f run/900_outbounds.json ]; then
		config
	fi
	sudo ./sing-box run -C run > log/sing-box.log 2>&1 &
}

stop()
{
	sudo kill -9 `ps axwww | grep 'sing-box run -C run' | grep -v grep | awk '{print $1}'` > /dev/null 2>&1
}

restart()
{
	chk_sudo
	stop
	disable_pf
	create_json
	start
	if [ "$TYPE" = "fwd" ]; then
		enable_pf
	fi
	check_connect
}

check_connect()
{
	cat conf/run.conf | awk '{print "Connect "$0"."}'
	check_startd_ok
	if [ "$TYPE" = "proxy" ]; then
		SOCKS5='--socks5 127.0.0.1:65080'
	else
		SOCKS5=''
	fi
	for A in $CHK_LIST; do
		curl -sSLI $SOCKS5 --connect-timeout 5 -w "%{http_code}" https://$A/ -o /dev/null | grep -q '^20' && echo "Check $A...OK." || echo "Check $A...Fail!"
	done
	curl -sSL $SOCKS5 --connect-timeout 5 https://cip.cc/ | awk '{if ($1=="IP") print "Internal IP: "$3" from:https://cip.cc/"}'
	curl -sSL $SOCKS5 --connect-timeout 5 https://api.ipify.org | awk '{print "GFW outside: "$1" from:https://api.ipify.org/"}'
}

subscribe()
{
	SUB_URL=$TYPE
	if [ "$SUB_URL" = "tun" ] || [ "$SUB_URL" = "proxy" ]; then
		echo "Error URL!!!"
		exit 1
	fi
	echo "Skip certificate validation:false,true[false]" | awk '{printf $0}'
	read allowInsecure
	if [ "$allowInsecure" != "true" ]; then
		allowInsecure=false
	fi
	mkdir -p db
	rm -f db/.subscribe
	echo "Get $SUB_URL data..." | awk '{printf $0}'
	curl -sSL --connect-timeout 5 $SUB_URL -o db/.subscribe && echo "done." || (echo "Fail!!!";exit 1) || exit 1
	cat db/.subscribe | grep '^vless://' | awk 'END{if(NR>0)printf "OK"}' | grep -q '^OK$' || (echo "Error data!!!";exit 1) || exit 1
	NODE_LIST=`cat db/.subscribe | grep '^vless://' | awk -F'#' '{if (NF==2) print $NF}'`
	if [ "$NODE_LIST" = "" ]; then
		echo "Error data!!!"
		exit 1
	fi
	echo "Convert subscribe to sing-box:"
	for NODE in $NODE_LIST; do
		if [ -f db/$NODE.sbox ]; then
			SUB_ACT="Update"
		else
			SUB_ACT="Create"
		fi
		echo -e "protocol=vless\nallowInsecure=$allowInsecure" > db/$NODE.sbox || (echo "Pass $NODE:Error name!!!"; exit 1) || continue
		echo "$SUB_ACT $NODE.sbox..." | awk '{printf $0}'
		NODE_INFO=`cat db/.subscribe | grep "#${NODE}$" | sed -e 's@vless://@@' -e "s/#${NODE}$//"`
		echo $NODE_INFO | tr -s '@?&' '\n' | awk '{
			if (NR==1) print "id="$0;
			if (NR==2) {
				split($0,ipv6,"]:");
				split($0,ipv4,":");
				if (ipv6[2]=="") {
					print "address="ipv4[1];
					print "port="ipv4[2];
				} else {
					print "address="ipv6[1];
					print "port="ipv6[2];
				}
			}
			if (NR>2) print $0
		}' | sed -e 's/^sni=/serverName=/' \
				-e 's/^pbk=/publicKey=/' \
				-e 's/^sid=/shortId=/' \
				-e 's/^address=\[/address=/' \
				>> db/$NODE.sbox && echo "done." || echo "Fail!!!"
	done
}

update()
{
	ifconfig >/dev/null 2>&1 | grep -q "inet $_tun_ip netmask" && SOCKS5='' || SOCKS5='--socks5 127.0.0.1:65080'
	PID=`ps axwww | grep 'sing-box run -C run' | grep -v grep | awk '{printf $1}'`
	if [ -z $PID ]; then
		SOCKS5=''
	fi
	NOW_VERSION=`./sing-box version 2>/dev/null | awk '{if (NR>1) exit;printf $3}'`
	NEW_VERSION=`curl -sSL https://api.github.com/repos/SagerNet/sing-box/tags | grep name | awk -F'"' '{if (NR>1) exit;printf $4}' | sed 's/^v//'`
	if [ "$NOW_VERSION" != "$NEW_VERSION" ] || [ "$NOW_VERSION" = "" ]; then
		echo "Have a new version:$NEW_VERSION,do you upgrade?[N/y]" | awk '{printf $0}'
		read CON
		if [ "$CON" = "y" ]; then 
			CPU=`uname -m`
			if [ "$CPU" = "x86_64" ]; then
				URL=https://github.com/SagerNet/sing-box/releases/download/v${NEW_VERSION}/sing-box-${NEW_VERSION}-darwin-amd64.tar.gz
			else
				URL=https://github.com/SagerNet/sing-box/releases/download/v${NEW_VERSION}/sing-box-${NEW_VERSION}-darwin-arm64.tar.gz
			fi
			echo "Download $URL..." | awk '{printf $0}'
			curl -skSL $SOCKS5 --connect-timeout 5 -w "%{http_code}" $URL -o sing-box.tar.gz | grep -q '^20' && echo "done." || (rm sing-box.tar.gz;echo "Fail!!!")
			if [ -f sing-box.tar.gz ]; then
				echo "Upgrade sing-box..." | awk '{printf $0}'
				tar xzf sing-box.tar.gz
				find . -name sing-box -exec mv {} ./ \;
				chmod 755 sing-box
				rm -rf sing-box.tar.gz sing-box-${NEW_VERSION}-*
				echo "done."
			fi
		fi
	fi
	
	#更新PF所需地址库
	URL_LIST='https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/cncidr.txt https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt'
	for URL in $URL_LIST; do
		echo "Download $URL..." | awk '{printf $0}'
		curl -skSL $SOCKS5 --connect-timeout 5 -w "%{http_code}" $URL -o tpl/cncidr.txt.new 2> /dev/null | grep -q '^20' && echo "done." && break || (rm -f tpl/cncidr.txt.new;echo "Fail!!!")
	done
	if [ ! -f tpl/cncidr.txt.new ]; then
		exit 1
	fi
	touch tpl/cncidr.txt
	NOW_MD5=`md5 tpl/cncidr.txt | awk '{printf $NF}'`
	NEW_MD5=`md5 tpl/cncidr.txt.new | awk '{printf $NF}'`
	if [ "$NEW_MD5" != "$NOW_MD5" ]; then
		echo "Create IP data..." | awk '{printf $0}'
		mv tpl/cncidr.txt.new tpl/cncidr.txt
		cat tpl/cncidr.txt | grep ' \- ' | awk -F"'" '{print $2}' | grep -v ':' | awk '{printf ","$1}' > conf/cn_ipv4.txt
		cat tpl/cncidr.txt | grep ' \- ' | awk -F"'" '{print $2}' | grep ':' | awk '{printf ","$1}' > conf/cn_ipv6.txt
		echo "done."
	else
		rm -f tpl/cncidr.txt.new
		echo "cncidr: Not new data."
	fi
	#导入route.conf里的IP到防火墙
	cat conf/route.conf | awk -F'=' '{if (($1=="ip") && ($3=="direct")) print $2}' | tr -s ',' '\n' | grep -v ':' | awk '{printf ","$1}' > conf/my_ipv4.txt
	cat conf/route.conf | awk -F'=' '{if (($1=="ip") && ($3=="direct")) print $2}' | tr -s ',' '\n' | grep ':' | grep -v 'geo' | awk '{printf ","$1}' > conf/my_ipv6.txt

	# 更新geo数据
	DAT_LIST='geoip geosite'
	for DAT in $DAT_LIST; do
		URL=https://github.com/soffchen/sing-$DAT/releases/latest/download/$DAT.db
		touch $DAT.db
		NOW_MD5=`md5 $DAT.db | awk '{printf $NF}'`
		NEW_MD5=$NOW_MD5
		echo "Download $URL..." | awk '{printf $0}'
		curl -skSL -w %{http_code} --retry 3 --connect-timeout 3 $URL -o $DAT.db.new | grep -q '^200$' &&\
			NEW_MD5=`md5 $DAT.db.new | awk '{printf $NF}'` && echo "done." || (echo "Fail!!!"; exit 1) || continue
		if [ "$NEW_MD5" != "$NOW_MD5" ]; then
			mv $DAT.db $DAT.db.old
			mv $DAT.db.new $DAT.db
		else
			rm -f $DAT.db.new
			echo "$DAT.db: Not new data."
		fi
	done
}

help()
{
	cat << HELP
$0 {start|stop|restart|config|subscribe|update} [tun|fwd|proxy]
start		Start sing-box.
stop		Stop sing-box
restart		Restart Sing-box
config		Set to use nodes, but set multiple at the same time.
subscribe	Subscribe
update		Upgrade sing-box,or update geoip and geosite.
Optional:
	tun		Use routing mode to forward user data. (Warning:Destroying local routing)
	fwd		Use PF firewall mode to forward user data.
	proxy	Using system proxy.
HELP
}

ERROR=0
if [ ! -f sing-box ] && [ "$ACT" != "update" ] && [ "$ACT" != "stop" ] && [ "$ACT" != "" ]; then
	echo "No found \"sing-box\"!!!"
	update
fi

if [ "$TYPE" == "" ]; then
	TYPE=tun
fi
if [ "$TYPE" != "tun" ] && [ "$TYPE" != "fwd" ] && [ "$TYPE" != "proxy" ]; then
	help
	exit 1
fi
case $ACT in
	start)
		check_run
		chk_sudo
		create_json
		start
		if [ "$TYPE" = "fwd" ]; then
			enable_pf
		fi
		check_connect
		#export TYPE && ./sbox_daemons &
	;;
	stop)
		chk_sudo
		#./sbox_daemons stop
		stop
		disable_pf
		#disable_proxy
	;;
	restart)
		restart
		#export TYPE && ./sbox_daemons &
	;;
	config)
		config
	;;
	subscribe)
		subscribe
	;;
	update)
		update
	;;
	*)
		help
	;;
esac
