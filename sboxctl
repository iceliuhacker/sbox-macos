#!/bin/bash


ACT=$1
TYPE=$2
NEW_VERSION=$2



chk_sudo()
{
	id -u | grep -q '^0$' && (echo "Don't run for root!!!"; exit 0) && exit 1
	sudo -p "Please input sudo password:" -l > /dev/null
	sudo sysctl net.inet.ip.forwarding=1 > /dev/null
	sudo sysctl net.inet6.ip6.forwarding=1 > /dev/null
}

create_node()
{
	ls tpl/*.input.tpl 2>/dev/null | sed -e 's/^tpl\///' -e 's/.input.tpl$//' | cat -n 
	echo "Please select the type of connection you want to create:" | awk '{printf $0}'
	read IN_TPL
	IN_TPL=`echo $IN_TPL | awk '{printf int($1)}'`
	if [ -z $IN_TPL ] || [ "$IN_TPL" = "0" ]; then
		exit
	fi
	TPL=`ls tpl/*.input.tpl 2>/dev/null | sed -n ${IN_TPL}p`
	if [ -z $TPL ]; then
		echo "Choice error!!!"
		exit 1
	fi
	echo "Please enter a node name:" | awk '{printf $0}'
	read CONF_FILE
	if [ -f db/$CONF_FILE.sbox ]; then
		echo "Already exists, do you want to overwrite it?" | awk '{printf $0}'
		read CON
		echo $CON | egrep -q -i 'y|yes' || exit 1
	fi
	touch db/$CONF_FILE.sbox || (echo "Error name!!!"; exit 1) || exit 1
	rm -f db/$CONF_FILE.sbox
	LINE=0
	while true; do
		LINE=`expr $LINE + 1`
		STR=`sed -n ${LINE}p $TPL`
		if [ -z "$STR" ]; then
			break
		fi
		
		VAR_NAME=`echo $STR | awk -F'=' '{printf $1}'`
		VAR_VALUE=`echo $STR | awk -F'=' '{printf $2}'`

		if [ "$VAR_NAME" = "protocol" ] || [  "$VAR_NAME" = "flow" ]; then
			echo "${VAR_NAME}=${VAR_VALUE}" >> db/$CONF_FILE.sbox
			continue
		fi
		if [ "$VAR_NAME" = "serverName" ] && [ "$VAR_VALUE" = "sni" ]; then
			echo "serverName=$sni" >> db/$CONF_FILE.sbox
			continue
		fi
		#获取提问里[]的内容，并设置为可选项以及默认赋值(默认第1个选项)。
		SELECT=`echo $VAR_VALUE | awk -F'[\\\[\\\]]' '{printf $2}'`
		if [ ! -z $SELECT ]; then
			echo "$VAR_VALUE" | awk '{printf $0}'
			read TMP_VAR
			echo $SELECT | tr -s ',' '\n' | grep -q "^${TMP_VAR}$" || TMP_VAR=`echo $SELECT | awk -F',' '{printf $1}'`
			echo "${VAR_NAME}=${TMP_VAR}" >> db/$CONF_FILE.sbox
			continue
		fi
		#从"xxxx,default nn:"格式里，提取nn作为默认值
		DEFAULT_STR=`echo $VAR_VALUE | awk -F'[, :]' '{printf $(NF-2)}'`
		DEFAULT_VAL=`echo $VAR_VALUE | awk -F'[, :]' '{printf $(NF-1)}'`
		if [ "$DEFAULT_STR" = "default" ] && [ ! -z $DEFAULT_VAL ]; then
			echo "$VAR_VALUE" | awk '{printf $0}'
			read TMP_VAR
			[ -z $TMP_VAR ] && TMP_VAR=$DEFAULT_VAL
			echo "${VAR_NAME}=${TMP_VAR}" >> db/$CONF_FILE.sbox
			continue
		fi

		echo $VAR_VALUE | awk '{printf $0}'
		read TMP_VAR
		echo "${VAR_NAME}='${TMP_VAR}'" >> db/$CONF_FILE.sbox
		export ${VAR_NAME}=${TMP_VAR}
	done
	echo "#### Creating Connection Nodes $CONF_FILE ####"
	cat db/$CONF_FILE.sbox
}

config()
{
	mkdir -p db
	echo '     0  new'
	ls db/*.sbox 2>/dev/null | sed -e 's/^db\///' -e 's/.sbox$//' | cat -n
cat << EOF
Please select configuration file,Multiple separated by spaces,all is all,DEL for delete node.
Example_1: 1        -> select 1.
Example_2: 1,3,5    -> select 1,3,5.
Example_3: all       -> select all.
EOF
	echo "Please input:[0]" | awk '{printf $0}'
	read TPL_NUMBER
	if [ "$TPL_NUMBER" = "" ]; then
		TPL_NUMBER=0
	fi
	if [ "$TPL_NUMBER" = "0" ]; then
		create_node
		exit 0
	fi
	if [ "$TPL_NUMBER" = "all" ]; then
		ls db/*.sbox 2>/dev/null | sed -e 's/^db\///' -e 's/.sbox$//' > conf/run.conf
		> conf/bak_run.conf
	else
		RUN_NUMBER=`echo $TPL_NUMBER | tr -s ' ,' '\n' | awk '{printf $1"p;"}'`
		ls db/*.sbox 2>/dev/null | sed -e 's/^db\///' -e 's/.sbox$//' | sed -n "${RUN_NUMBER}" > conf/run.conf
		BAK_NUMBER=`echo $TPL_NUMBER | tr -s ' ,' '\n' | awk '{printf $1"d;"}'`
		ls db/*.sbox 2>/dev/null | sed -e 's/^db\///' -e 's/.sbox$//' | sed "${BAK_NUMBER}" > conf/bak_run.conf
	fi
	DEST_LIST=`cat conf/run.conf`
	if [ "$DEST_LIST" = "" ]; then
		create_node
	fi
	PID=`ps axwww | grep 'sing-box run -C run' | grep -v grep | awk '{printf $1}'`
	if [ "$PID" != "" ]; then
		restart
	else
		create_json
	fi
}

create_json()
{
	ls db/*.sbox >/dev/null 2>&1 || config
	RUN_COUNT=`cat conf/run.conf | wc -l | awk '{printf $1}'`
	if [ "$RUN_COUNT" -lt "1" ]; then
		config
	fi

	mkdir -p run
	rm -f run/*.json
	#创建节点配置
	DEST_RULE_LIST=''
	RUN_CONF=`cat conf/run.conf`
	BAK_CONF=`awk '{print $1":bak"}' conf/bak_run.conf `
	for SBOX_DB in $RUN_CONF $BAK_CONF; do
		ACTIVE=`echo $SBOX_DB | awk -F':' '{printf $NF}'`
		XCONF=`echo $SBOX_DB | sed 's/:bak$//'`
		source db/$XCONF.sbox || RUN_COUNT=`expr $RUN_COUNT - 1`
		if [ "$RUN_COUNT" -lt "1" ]; then
			echo "Not alive node!!!"
			config
		fi

		if [ -z $network ]; then
			network=tcp
		fi
		JCON=0
		if [ "$JCON" != "1" ] && [ "$protocol" = "vless" ] && [ "$flow" = "xtls-rprx-vision" ] && [ "$network" = "tcp" ] && [ "$security" = "reality" ]; then
			TPL=tpl/$protocol.$flow.$security.json.tpl
			JCON=1
		fi
		if [ "$JCON" != "1" ] && [ "$protocol" = "vless" ] && [ "$flow" = "xtls-rprx-vision" ] && [ "$network" = "tcp" ] && [ "$security" = "tls" ]; then
			TPL=tpl/$protocol.$flow.$security.json.tpl
			JCON=1
		fi
		if [ "$JCON" != "1" ] && [ "$protocol" != "" ] && [ -f tpl/$protocol.json.tpl ]; then
			TPL=tpl/$protocol.json.tpl
			JCON=1
		fi

		if [ "$JCON" = "0" ]; then
			echo "Error sing-box date \"$XCONF\"!!"
			continue
		fi
		DEST_RULE_LIST=$DEST_RULE_LIST`cat db/$XCONF.sbox | grep 'address=' | tr -d \' | awk -F'=' '{print "pass out quick inet from any to "$2","}'`
		
		CONF_NUMBER=600
		if [ "$ACTIVE" = "bak" ]; then
			CONF_NUMBER=700
		fi
		NODE_JSON=`./sing-box generate uuid`
		cat $TPL | sed -e "s/_TAG_/-${XCONF}/g" \
						-e "s/_protocol_/${protocol}/g" \
						-e "s/_address_/${address}/g" \
						-e "s/_port_/${port}/g" \
						-e "s/_flow_/${flow}/g" \
						-e "s/_id_/${id}/g" \
						-e "s/_security_/${security}/g" \
						-e "s/_sni_/${sni}/g" \
						-e "s/_serverName_/${serverName}/g" \
						-e "s/_fingerprint_/${fp}/g" \
						-e "s/_allowInsecure_/${allowInsecure}/g" \
						-e "s/_publicKey_/${publicKey}/g" \
						-e "s/_shortId_/${shortId}/g" \
						-e "s/_username_/${username}/g" \
						-e "s/_password_/${password}/g" \
						-e "s@_private_key_path_@${private_key_path}@g" \
						-e "s@_private_key_passphrase_@${private_key_passphrase}@g" \
						-e "s@_up_mbps_@${up_mbps}@g" \
						-e "s@_down_mbps_@${down_mbps}@g" \
						-e "s@_congestion_control_@${congestion_control}@g" \
						-e "s@_udp_relay_mode_@${udp_relay_mode}@g" \
						> run/${CONF_NUMBER}_$NODE_JSON.json
	done

	#创建自动选择及冗余配置
	TAG_LIST=`cat run/600_*.json 2>/dev/null | grep UP_LINK | awk -F'"' '{printf $4"\",\""}' | sed 's/","$//'`
	if [ ! -z "$TAG_LIST" ]; then
		cat tpl/urltest.json.tpl | sed -e "s/_TAG_LIST_/${TAG_LIST}/g" > run/610_urltest.json
	fi

	#创建手动选择配置
	ALL_LIST=`cat run/600_*.json run/700_*.json 2>/dev/null | grep UP_LINK | awk -F'"' '{printf $4"\",\""}' | sed 's/","$//'`
	if [ ! -z "$ALL_LIST" ]; then
		cat tpl/selector.json.tpl | sed -e "s/_ALL_LIST_/${ALL_LIST}/g" > run/710_selector.json
	fi

	#创建tun配置
	if [ "$TYPE" = "proxy" ]; then
		if [ "$SET_SYS_PROXY" = "auto" ]; then
			SET_SYS_PROXY=true
		fi
	else
		if [ "$SET_SYS_PROXY" = "auto" ]; then
			SET_SYS_PROXY=false
		fi
		if [ "$TYPE" = "fwd" ]; then
			GDNS='"8.8.8.8/32"'
			GDNS6='"2001:4860:4860::8888/128"'
		else
			GDNS=''
			GDNS6=''
		fi
		cat tpl/tun.json.tpl | sed -e "s/_tun_ip_/${_tun_ip}/g" \
									-e "s/_tun_ip6_/${_tun_ip6}/g" \
									-e "s@_GDNS_@${GDNS}@g" \
									-e "s@_GDNS6_@${GDNS6}@g" \
									-e "s@_TUN_STACK_@${TUN_STACK}@g" \
									> run/100_tun.json
	fi

	#创建主配置
	cat tpl/main.json.tpl | sed "s/_SET_SYS_PROXY_/${SET_SYS_PROXY}/" > run/000_main.json

	#创建规则集
	cat << EOF >> run/300_route_rules-set.json
{
    "route": {
        "rule_set": [
EOF
	touch run/.rules-set
	cat conf/route.conf conf/dns.conf | egrep 'geoip=|geosite=' \
	| awk -F'#' '{if ($1!="") print $1}' \
	| awk -F'=' '{
		LEN=split($2,RULES,",");
		for(i=1;i<=LEN;i++) {
			R_EXIST=system("grep -q \""$1"-"RULES[i]"\" run/.rules-set");
			if (R_EXIST==0) continue;
			print "            {";
			print "                \"tag\": \""$1"-"RULES[i]"\",";
			print "                \"type\": \"remote\",";
			print "                \"format\": \"binary\",";
			print "                \"url\": \"https://raw.githubusercontent.com/SagerNet/sing-"$1"/rule-set/"$1"-"RULES[i]".srs\",";
			print "                \"download_detour\": \"UP_LINK\"";
			print "            },";
			system("echo \""$1"-"RULES[i]"\" >> run/.rules-set");
		}
	}' | sed '$s/},/}/' >> run/300_route_rules-set.json
	rm -f run/.rules-set

	cat << EOF >> run/300_route_rules-set.json
        ]
    }
}
EOF

	#创建DNS规则
	cat << EOF >> run/200_dns.json
{
    "dns": {
        //"final": "local",
        "disable_cache": false,
        "servers": [
EOF
	grep 'nameserver=' conf/dns.conf \
	| awk -F'#' '{if ($1!="") print $1}' \
	| awk -F'=' '{
		LEN=split($2,DNS,",");
		S_strategy="";
		for(i=1;i<=LEN;i++) {
			print "            {";
			print "                \"tag\": \""DNS[i]"\",";
			if ($3!="direct") {
				DNS[i]="tcp://"DNS[i];
				S_strategy="ipv4_only";
			};
			print "                \"address\": \""DNS[i]"\",";
			print "                \"strategy\": \""S_strategy"\",";
			print "                \"detour\": \""$3"\"";
			print "            },";
		}
	}' >> run/200_dns.json
	LOCAL_DNS=`awk '{if($1 ~/^nameserver$/) print $2;}' /etc/resolv.conf | grep -v ':'`
	for LOCAL_DNS in $LOCAL_DNS; do
		host -W 1 -t soa . $LOCAL_DNS > /dev/null && break
	done
	cat << EOF >> run/200_dns.json
            {
                "tag": "local",
                "address": "${LOCAL_DNS}",
                "detour": "direct"
            },
            {
                "tag": "block",
                "address": "rcode://success"
            }
        ],
        "rules": [
EOF
	SBOX_DLIST=`awk -F'=' '{if($1=="address") print $2}' db/*.sbox | tr -d \' | awk -F'.' '{if($NF !~ /^[0-9]+$/) printf "\""$0"\","}' | sed 's/,$//'`
	if [ ! -z $SBOX_DLIST ]; then
		cat << EOF >> run/200_dns.json
            {
                "domain_suffix": [${SBOX_DLIST}],
                "server": "local"
            },
EOF
	fi

	egrep 'domain_suffix=' conf/dns.conf \
	| awk -F'#' '{if ($1!="") print $1}' \
	| awk -F'=' '{
		DLIST=$2;
		gsub(/,/,"\",\"",DLIST);
		LEN=split($3,DNS,",");
		for(i=1;i<=LEN;i++) {
			print "            {";
			print "                \""$1"\": [\""DLIST"\"],";
			print "                \"server\": \""DNS[i]"\"";
			print "            },";
		};

	}' >> run/200_dns.json

	DIRECT_DNS=`cat conf/dns.conf | grep '=direct$' | awk -F'#' '{if (NR>1) print $1}' | awk -F'=' '{printf $2","}' | sed 's/,$//'`
	if [ -z $DIRECT_DNS ]; then
		DIRECT_DNS=local
	fi
	UP_LINK_DNS=`cat conf/dns.conf | grep '=UP_LINK$' | awk -F'#' '{if (NR>1) print $1}' | awk -F'=' '{printf $2","}' | sed 's/,$//'`
	if [ -z $UP_LINK_DNS ]; then
		UP_LINK_DNS=8.8.8.8
	fi
	egrep 'domain_suffix=|geosite=' conf/route.conf \
	| awk -F'#' '{if ($1!="") print $1}' \
	| awk -F'=' '{
		DLIST=$2;
		DNS_LIST="local";
		if ($3=="direct") DNS_LIST="'$DIRECT_DNS'";
		if ($3=="UP_LINK") DNS_LIST="'$UP_LINK_DNS'"; 
		LEN=split(DNS_LIST,DNS,",");
		if ($1=="domain_suffix") {
			gsub(/,/,"\",\"",DLIST);
			for(i=1;i<=LEN;i++) {
				print "            {";
				print "                \""$1"\": [\""DLIST"\"],";
				print "                \"server\": \""DNS[i]"\"";
				print "            },";
			};
		};
		if ($1=="geosite") {
			gsub(/,/,"\",\"geosite-",DLIST);
			for(i=1;i<=LEN;i++) {
				print "            {";
				print "                \"type\": \"logical\",";
				print "                \"mode\": \"and\",";
				print "                \"rules\": [";
				print "                    {";
				print "                        \"rule_set\": [\"geosite-"DLIST"\"]";
				print "                    }";
				print "                ],";
				print "                \"server\": \""DNS[i]"\"";
				print "            },";
			};
		};
	}' | sed '$s/},/}/' >> run/200_dns.json

	cat << EOF >> run/200_dns.json
        ]
    }
}
EOF

	#创建路由规则
	rm -f run/route_ipv4.direct run/route_ipv6.direct run/route_ipv4.fwd run/route_ipv6.fwd
	#导入route.conf里的IP到防火墙
	cat conf/route.conf | awk -F'=' '{if (($1=="ip") && ($3!="direct")) print $2}' | tr -s ',' '\n' | grep -v ':' | awk '{printf ","$1}' >> run/route_ipv4.fwd
	cat conf/route.conf | awk -F'=' '{if (($1=="ip") && ($3!="direct")) print $2}' | tr -s ',' '\n' | grep ':' | awk '{printf ","$1}' >> run/route_ipv6.fwd
	
	cat conf/route.conf | awk -F'=' '{if (($1=="ip") && ($3=="direct")) print $2}' | tr -s ',' '\n' | grep -v ':' | awk '{printf ","$1}' >> run/route_ipv4.direct
	cat conf/route.conf | awk -F'=' '{if (($1=="ip") && ($3=="direct")) print $2}' | tr -s ',' '\n' | grep ':' | awk '{printf ","$1}' >> run/route_ipv6.direct
	cat << EOF >> run/300_route.json
{
    "route": {
        "auto_detect_interface": true,
        "final": "UP_LINK",
        "rules": [
            {
                "port": 53,
                "outbound": "dns-out"
            },
            {
                "protocol": "dns",
                "outbound": "dns-out"
            },
            {
                "ip_is_private": true,
                "outbound": "direct"
            },
            {
                "clash_mode": "Direct",
                "outbound": "direct"
            },
            {
                "clash_mode": "Global",
                "outbound": "UP_LINK"
            },
EOF
	RT_INFO=`cat conf/route.conf | awk -F'#' '{print $1}'`
	for RT in $RT_INFO;do
		HOST_TYPE=`echo $RT | awk -F'=' '{printf $1}'`
		if [ "$HOST_TYPE" = "ip" ]; then
			HOST_TYPE=ip_cidr
		fi
		HOST_LIST=`echo $RT | awk -F'=' '{printf $2}' | sed 's/,/","/g'`
		if [ "$HOST_TYPE" = "dport" ]; then
			HOST_TYPE=port_range
			PORT_LIST=`echo $RT | awk -F'=' '{printf $2}' | tr -s , ' '`
			DPORT=''
			for PORT in $PORT_LIST; do
				if [ -z $DPORT ]; then
					echo $PORT | grep -q ':' && DPORT=$PORT || DPORT=$PORT:$PORT
				else
					echo $PORT | grep -q ':' && DPORT="$DPORT\",\"$PORT" || DPORT="$DPORT\",\"$PORT:$PORT"
				fi
			done
			HOST_LIST=$DPORT
		fi
		HOST_ACT=`echo $RT | awk -F'=' '{printf $3}'`
		INVERT=`echo $RT | awk -F'=' '{if($4=="invert") printf "true";else printf "false"}'`

		echo $HOST_TYPE | egrep -q 'geosite|geoip' && cat << EOF >> run/300_route.json
            {
                "type": "logical",
                "mode": "and",
                "rules": [
                    {
                        "rule_set": ["${HOST_TYPE}-`echo $HOST_LIST | sed "s/\",\"/\",\"${HOST_TYPE}-/g"`"]
                    }
                ],
                "invert": ${INVERT},
                "outbound": "$HOST_ACT"
            },
EOF

		echo $HOST_TYPE | egrep -q 'geosite|geoip' || cat << EOF >> run/300_route.json
            {
                "$HOST_TYPE": ["$HOST_LIST"],
                "invert": ${INVERT},
                "outbound": "$HOST_ACT"
            },
EOF

		if [ "$HOST_TYPE" = "geoip" ] && [ "$HOST_ACT" = "direct" ]; then
			echo ","$PRIVATE_IPV4 >> run/route_ipv4.direct && echo ","$PRIVATE_IPV6 >> run/route_ipv6.direct
			echo $HOST_LIST | tr -s ',"' '\n' | grep -q '^cn$' && cat conf/cn_ipv4.txt >> run/route_ipv4.direct && cat conf/cn_ipv6.txt >> run/route_ipv6.direct
		fi
	done
	sed -i '' '$s/},/}/' run/300_route.json
	cat << EOF >> run/300_route.json
        ]
    }
}
EOF

	#其他出规则
	cat << EOF >> run/900_outbounds.json
{
    "outbounds": [
        {
            "tag": "dns-out",
            "type": "dns"
        },
        {
            "tag": "direct",
            "type": "direct"
        },
        {
            "tag": "block",
            "type": "block"
        }
    ]
}
EOF
	#创建api接口
	./sing-box version | grep -q with_clash_api && cat tpl/clash-api.json.tpl >> run/390_clash-api.json
	echo "*** Create configuration file of type $TYPE ***"
}

enable_tun_custom_rt()
{
	check_startd_ok
	CRT4_LIST=`cat run/route_ipv4.fwd | tr -s ',' ' '`
	for RT in $CRT4_LIST; do
		sudo route add -ifscope $TUN_IF $RT $_tun_ip > /dev/null
	done
	CRT6_LIST=`cat run/route_ipv6.fwd | tr -s ',' ' '`
	for RT in $CRT6_LIST; do
		sudo route add -inet6 $RT $_tun_ip6 > /dev/null
	done
}

enable_pf()
{
	check_startd_ok
	ME=`whoami`
	_first_fwd_ipv4='8.8.8.8' _first_fwd_ipv6='2001:4860:4860::8888'
	if [ -f run/route_ipv4.fwd ]; then
		_first_fwd_ipv4=$_first_fwd_ipv4`cat run/route_ipv4.fwd | tr -d '\r\n'`
	fi
	if [ -f run/route_ipv6.direct ]; then
		_first_fwd_ipv6=$_first_fwd_ipv6`cat run/route_ipv6.fwd | tr -d '\r\n'`
	fi
	
	_skip_net='127.0.0.0/8' _skip_net6='::1/128'
	if [ -f run/route_ipv4.direct ]; then
		_skip_net=$_skip_net`cat run/route_ipv4.direct | tr -d '\r\n'`
	fi
	if [ -f run/route_ipv6.direct ]; then
		_skip_net6=$_skip_net6`cat run/route_ipv6.direct | tr -d '\r\n'`
	fi
	cat << EOF > run/pf.rules
table <skip_net> { $_skip_net }

table <skip_net6> { $_skip_net6 }

`echo "${DEST_RULE_LIST}" | tr ',' '\n' | awk -F':' '{if (NF>1) {sub(/ inet /," inet6 ");print $0;} else print $1}'`

`cat conf/route.conf | awk -F'=' '{
	if (($1=="dport") && ($3=="direct")) {
		print "pass out quick inet proto {tcp,udp} from any to any port {"$2"}";
		print "pass out quick inet6 proto {tcp,udp} from any to any port {"$2"}";
	}
}'`

`(
	if [ "$_first_fwd_ipv4" != "" ]; then
		echo "table <first_fwd_ipv4> {$_first_fwd_ipv4}"
		echo "pass out quick route-to ($TUN_IF $_tun_ip) inet from any to <first_fwd_ipv4> user = $ME"
	fi
	if [ "$_first_fwd_ipv6" != "" ]; then
		echo "table <first_fwd_ipv6> {$_first_fwd_ipv6}"
		echo "pass out quick route-to ($TUN_IF $_tun_ip6) inet6 from any to <first_fwd_ipv6> user = $ME"
	fi
)`

pass out quick route-to ($TUN_IF $_tun_ip) inet proto {tcp,udp} from any to any port 53 user {$ME,_mdnsresponder}
#pass out quick route-to ($TUN_IF $_tun_ip) inet proto {tcp,udp} from any to any port 53 user = $ME
pass out quick route-to ($TUN_IF $_tun_ip) inet from any to ! <skip_net> user = $ME
pass out quick route-to ($TUN_IF $_tun_ip) inet proto icmp from any to ! <skip_net>

pass out quick route-to ($TUN_IF $_tun_ip6) inet6 proto {tcp,udp} from any to any port 53 user {$ME,_mdnsresponder}
#pass out quick route-to ($TUN_IF $_tun_ip6) inet6 proto {tcp,udp} from any to any port 53 user = $ME
pass out quick route-to ($TUN_IF $_tun_ip6) inet6 from any to ! <skip_net6> user = $ME
pass out quick route-to ($TUN_IF $_tun_ip6) inet6 proto icmp6 from any to ! <skip_net6>

#pass out quick all
EOF
	sudo pfctl -e > /dev/null 2>&1
	sudo pfctl -f run/pf.rules > /dev/null 2>&1 || (echo "PF firewall rule \"run/pf.rules\" load Fail!!!"; sudo pfctl -f run/pf.rules; exit 1) || exit 1
	dscacheutil -flushcache 2>&1
	sudo dscacheutil -flushcache 2>&1
	sudo killall -HUP mDNSResponder 2>&1
}

disable_pf()
{
	sudo pfctl -dF all > /dev/null 2>&1
	dscacheutil -flushcache 2>&1
	sudo dscacheutil -flushcache 2>&1
	sudo killall -HUP mDNSResponder 2>&1
}

enable_proxy()
{
	networksetup -listnetworkserviceorder | grep '^([0-99]) ' | sed 's/^([0-99]) //' | \
		while read ETH; do
			networksetup -setsocksfirewallproxy "$ETH" localhost 65080
			networksetup -setsocksfirewallproxystate "$ETH" on
			#networksetup -setproxybypassdomains "$ETH" youtube.com whatismyipaddress.com    #跳过代理得域名
			#networksetup -setv6off "$ETH"
		done
}

disable_proxy()
{
	networksetup -listnetworkserviceorder | grep '^([0-99]) ' | sed 's/^([0-99]) //' | \
		while read ETH; do
			networksetup -setsocksfirewallproxy "$ETH" "" ""
			networksetup -setsocksfirewallproxystate "$ETH" off
			networksetup -setwebproxystate "$ETH" off
			networksetup -setsecurewebproxystate "$ETH" off
			#networksetup -setv6automatic "$ETH"
		done
}

check_run()
{
	PID=`ps axwww | grep 'sing-box run -C run' | grep -v grep | awk '{printf $1}'`
	if [ "$PID" != "" ]; then
		echo "Already running..."
		exit 0
	fi
}

check_startd_ok()
{
	STARTED=0 TUN_IF=
	for x in `seq 20`; do
		sleep 0.2
		if [ "$TYPE" = "proxy" ]; then
			netstat -an | grep -q '*.65080' && STARTED=1 && break
		else
			TUN_IF=`netstat -f inet -rn | awk '{if ($1=="'$_tun_ip'") printf $4}'`
			[ ! -z $TUN_IF ] && STARTED=1 && break
		fi
	done
	if [ "$STARTED" != "1" ]; then
		stop
		disable_pf
		echo "Start Fail!!!"
		cat log/sing-box.log
		exit 1
	fi
}

start()
{
	if [ ! -f run/000_main.json ] || [ ! -f run/200_dns.json ] || [ ! -f run/300_route.json ] || [ ! -f run/900_outbounds.json ]; then
		config
	fi
	sudo ./sing-box run -C run > log/sing-box.log 2>&1 &
}

stop()
{
	sudo kill -9 `ps axwww | grep 'sing-box run -C run' | grep -v grep | awk '{print $1}'` > /dev/null 2>&1
	disable_proxy
}

restart()
{
	chk_sudo
	stop
	disable_pf
	create_json
	start
	if [ "$TYPE" = "tun" ]; then
		enable_tun_custom_rt
	fi
	if [ "$TYPE" = "fwd" ]; then
		enable_pf
	fi
	check_connect
	echo "*** Restart by $TYPE mode ***"
	open_api
}

check_connect()
{
	cat conf/run.conf | awk '{print "Connect "$0"."}'
	check_startd_ok
	if [ "$TYPE" = "proxy" ]; then
		SOCKS5='--socks5 127.0.0.1:65080'
	else
		SOCKS5=''
	fi
	for A in $CHK_LIST; do
		curl -skSLI $SOCKS5 --connect-timeout 5 -w "%{http_code}" https://$A/ -o /dev/null | grep -q '^20' && echo "Check $A...OK." || echo "Check $A...Fail!"
	done
	curl -skSL $SOCKS5 --connect-timeout 5 http://myip.ipip.net | awk '{print "Internal "$2" from:http://myip.ipip.net/"}'
	curl -skSL $SOCKS5 --connect-timeout 5 https://api.ipify.org | awk '{print "GFW outside: "$1" from:https://api.ipify.org/"}'
}

subscribe()
{
	SUB_URL=$TYPE
	if [ "$SUB_URL" = "tun" ] || [ "$SUB_URL" = "proxy" ]; then
		echo "Error URL!!!"
		exit 1
	fi
	echo "Skip certificate validation:false,true[false]" | awk '{printf $0}'
	read allowInsecure
	if [ "$allowInsecure" != "true" ]; then
		allowInsecure=false
	fi
	mkdir -p db
	rm -f db/.subscribe
	echo "Get $SUB_URL data..." | awk '{printf $0}'
	curl -skSL --connect-timeout 5 $SUB_URL -o db/.subscribe && echo "done." || (echo "Fail!!!";exit 1) || exit 1
	cat db/.subscribe | egrep '^vless://|^hysteria2://|^tuic://' | awk 'END{if(NR>0)printf "OK"}' | grep -q '^OK$' || (echo "Error data!!!";exit 1) || exit 1
	#获取节点名列表
	NODE_LIST=`cat db/.subscribe | egrep '^vless://|^hysteria2://|^hy2://|^tuic://' | awk -F'#' '{if (NF==2) print $NF}'`
	if [ "$NODE_LIST" = "" ]; then
		echo "Error data!!!"
		exit 1
	fi
	BAND_SET=
	cat db/.subscribe | egrep -q '^hysteria2://|^hy2://' && BAND_SET=1
	if [ ! -z $BAND_SET ]; then
		echo 'up_mbps,default 30:' | awk '{printf $0}'
		read HY2_UP
		[ -z $HY2_UP ] && HY2_UP=30

		echo 'down_mbps,default 100:' | awk '{printf $0}'
		read HY2_DOWN
		[ -z $HY2_DOWN ] && HY2_DOWN=100
	fi
	echo "Convert subscribe to sing-box:"
	for NODE in $NODE_LIST; do
		if [ -f db/$NODE.sbox ]; then
			SUB_ACT="Update"
		else
			SUB_ACT="Create"
		fi
		PROTOCOL=`cat db/.subscribe | grep "#${NODE}$" | awk -F':' '{printf $1}'`
		echo -e "protocol=${PROTOCOL}\nallowInsecure=$allowInsecure" > db/$NODE.sbox || (echo "Pass $NODE:Error name!!!"; exit 1) || continue
		if [ "$PROTOCOL" = "hysteria2" ] || [ "$PROTOCOL" = "hy2" ]; then
			echo -e "up_mbps=${HY2_UP}\ndown_mbps=${HY2_DOWN}" >> db/$NODE.sbox
		fi
		echo "$SUB_ACT $NODE.sbox..." | awk '{printf $0}'
		NODE_INFO=`cat db/.subscribe | grep "#${NODE}$" | sed -e 's@\(.*\)://@@' -e "s/#${NODE}$//"`
		echo $NODE_INFO | tr -s '@?&/' '\n' | awk '{
			if (NR==1) print "id="$0;
			if (NR==2) {
				split($0,ipv6,"]:");
				split($0,ipv4,":");
				if (ipv6[2]=="") {
					print "address="ipv4[1];
					print "port="ipv4[2];
				} else {
					print "address="ipv6[1];
					print "port="ipv6[2];
				}
			}
			if (NR>2) print $0
		}' | sed -e 's/^sni=/serverName=/' \
				-e 's/^pbk=/publicKey=/' \
				-e 's/^sid=/shortId=/' \
				-e 's/^address=\[/address=/' \
				>> db/$NODE.sbox && echo "done." || echo "Fail!!!"
	done
}

update()
{
	PID=`ps axwww | grep 'sing-box run -C run' | grep -v grep | awk '{printf $1}'`
	if [ -z $PID ]; then
		SOCKS5=''
	else
		SOCKS5='--socks5 127.0.0.1:65080'
	fi
	./sing-box version 2>/dev/null
	NOW_VERSION=`./sing-box version 2>/dev/null | awk '{if (NR>1) exit;printf $3}'`
	if [ -z $NEW_VERSION ]; then
		NEW_VERSION=`curl -skSL $SOCKS5 https://api.github.com/repos/SagerNet/sing-box/tags 2>/dev/null | grep name | awk -F'"' '{if (NR>1) exit;printf $4}' | sed 's/^v//'`
	else
		curl -skSL $SOCKS5 https://api.github.com/repos/SagerNet/sing-box/tags 2>/dev/null | grep name | awk -F'"' '{print $4}' | sed 's/^v//' | grep -q "^${NEW_VERSION}$" || (echo "No $NEW_VERSION version available.";exit 1) || exit 1
	fi
	if [ ! -z "$NEW_VERSION" ] && [ "$NOW_VERSION" != "$NEW_VERSION" ] || [ "$NOW_VERSION" = "" ]; then
		echo "Have a new version:$NEW_VERSION,do you upgrade?[N/y]" | awk '{printf $0}'
		read CON
		if [ "$CON" = "y" ]; then 
			CPU=`uname -m`
			if [ "$CPU" = "x86_64" ]; then
				URL=https://github.com/SagerNet/sing-box/releases/download/v${NEW_VERSION}/sing-box-${NEW_VERSION}-darwin-amd64.tar.gz
			else
				URL=https://github.com/SagerNet/sing-box/releases/download/v${NEW_VERSION}/sing-box-${NEW_VERSION}-darwin-arm64.tar.gz
			fi
			echo "Download $URL..." | awk '{printf $0}'
			curl -skSL $SOCKS5 --connect-timeout 5 -w "%{http_code}" $URL -o sing-box.tar.gz | grep -q '^20' && echo "done." || (rm sing-box.tar.gz;echo "Fail!!!")
			if [ -f sing-box.tar.gz ]; then
				echo "Upgrade sing-box..." | awk '{printf $0}'
				tar xzf sing-box.tar.gz
				touch sing-box
				mv sing-box sing-box.old
				find . -name sing-box -exec mv {} ./ \;
				chmod 755 sing-box
				rm -rf sing-box.tar.gz sing-box-${NEW_VERSION}-*
				echo "done."
			fi
		fi
	fi
	
	#更新PF所需地址库
	URL_LIST='https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/cncidr.txt https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt'
	for URL in $URL_LIST; do
		echo "Download $URL..." | awk '{printf $0}'
		curl -skSL $SOCKS5 --connect-timeout 5 -w "%{http_code}" $URL -o tpl/cncidr.txt.new 2> /dev/null | grep -q '^20' && echo "done." && break || (rm -f tpl/cncidr.txt.new;echo "Fail!!!")
	done
	if [ ! -f tpl/cncidr.txt.new ]; then
		exit 1
	fi
	touch tpl/cncidr.txt
	NOW_MD5=`md5 tpl/cncidr.txt | awk '{printf $NF}'`
	NEW_MD5=`md5 tpl/cncidr.txt.new | awk '{printf $NF}'`
	if [ "$NEW_MD5" != "$NOW_MD5" ]; then
		echo "Create IP data..." | awk '{printf $0}'
		mv tpl/cncidr.txt.new tpl/cncidr.txt
		cat tpl/cncidr.txt | grep ' \- ' | awk -F"'" '{print $2}' | grep -v ':' | awk '{printf ","$1}' > conf/cn_ipv4.txt
		cat tpl/cncidr.txt | grep ' \- ' | awk -F"'" '{print $2}' | grep ':' | awk '{printf ","$1}' > conf/cn_ipv6.txt
		echo "done."
	else
		rm -f tpl/cncidr.txt.new
		echo "cncidr: Not new data."
	fi

	echo "Do you restart sing-box?[N/y]" | awk '{printf $0}'
	read CON
	echo $CON | egrep -q -i 'y|yes' && restart
}

open_api()
{
	if [ -f run/390_clash-api.json ] && [ "$WEB_API" = "yes" ]; then
		echo $OPEN_WEB_API | egrep -q -i 'y|yes' && open https://yacd.metacubex.one/ || echo "Web API: https://yacd.metacubex.one/"
	fi
}

print_conf()
{	
	if [ "$TYPE" = "pc" ]; then
		SYS_PROXY=true
	else
		SYS_PROXY=false
	fi
	./sing-box merge -C run .sing-box.json.tmp
	sed -e "s/\"set_system_proxy\": \(.*\)/\"set_system_proxy\": $SYS_PROXY/" .sing-box.json.tmp | tee sing-box.json
	rm -f .sing-box.json.tmp
	echo "" >&2
	echo "The configuration file has been saved to \"$PWD/sing-box.json\"." >&2
}

help()
{
	cat << HELP
$0 {start|stop|restart|config|subscribe|update|print} [tun|fwd|proxy|URL]
start		Start sing-box.
stop		Stop sing-box.
restart		Restart Sing-box.
config		Set to use nodes, but set multiple at the same time.
subscribe	Subscribe.
update		Upgrade sing-box,or update geoip and geosite.
print		[pc] Print Configuration.
Optional:
	tun		Use routing mode to forward user data. (Warning:Destroying local routing)
	fwd		Use PF firewall mode to forward user data.
	proxy	Using system proxy.
	URL     Subscription address.(Not a string URL, but a URL that starts with HTTP.)
HELP
}

if [ ! -f conf/system.conf ]; then
	cp conf/system.conf.default conf/system.conf
fi
if [ ! -f conf/dns.conf ]; then
	cp conf/dns.conf.default conf/dns.conf
fi
if [ ! -f conf/route.conf ]; then
	cp conf/route.conf.default conf/route.conf
fi
touch conf/run.conf
source conf/system.conf

if [ ! -f sing-box ] && [ "$ACT" != "update" ] && [ "$ACT" != "stop" ] && [ "$ACT" != "" ]; then
	echo "No found \"sing-box\"!!!"
	update
fi
if [ "$ACT" != "update" ] && [ "$ACT" != "print" ] && [ "$ACT" != "subscribe" ] && [ "$TYPE" != "" ] && [ "$TYPE" != "tun" ] && [ "$TYPE" != "fwd" ] && [ "$TYPE" != "proxy" ]; then
	help
	exit 1
fi
if [ "$TYPE" = "tun" ] || [ "$TYPE" = "fwd" ] || [ "$TYPE" = "proxy" ]; then
	echo $TYPE > .run_mode
else
	[ -z $TYPE ] && [ ! -f .run_mode ] && echo tun > .run_mode
fi
echo $ACT | egrep -q '^subscribe$|^print$' || TYPE=`cat .run_mode`
case $ACT in
	start)
		check_run
		chk_sudo
		create_json
		start
		if [ "$TYPE" = "tun" ]; then
			enable_tun_custom_rt
		fi
		if [ "$TYPE" = "fwd" ]; then
			enable_pf
		fi
		check_connect
		echo "*** Start by $TYPE mode ***"
		open_api
	;;
	stop)
		chk_sudo
		stop
		disable_pf
	;;
	restart)
		restart
	;;
	config)
		config
	;;
	subscribe)
		subscribe
	;;
	update)
		update
	;;
	print)
		print_conf | tee sing-box.json
	;;
	*)
		help
	;;
esac
